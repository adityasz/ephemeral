#!/usr/bin/env bash
#
# Link cache files and other ephemeral files to $XDG_RUNTIME_DIR
#
# @author: Daniel Souza <me at posix dot dev dot br>
# @license: GPLv3
# @usage:
# @deps:

# shellcheck disable=SC2034

# Utils
# -----
# Debug
# verbosity, prints shell input lines as they are read
# set -v

# exit when a command has a non-zero exit status
# note: '||:' at the end of a pipe mask a non-zero exit
set -e

# exit when referencing undefined variable
# note: $* and $@ are exceptions
# set -u

# exit if any command in a pipe fail
set -o pipefail

# Text Formatting 
reset="\e[0;0m"
red="\e[1;31m"
green="\e[1;32m"
yellow="\e[1;33m"
blue="\e[1;34m"
strong="\e[1;39m"

# Dependencies
deps=(fd)
for prog in "${deps[@]}"; do
  if [ ! "$(command -v "$prog")" ]; then
    printf "${red}Required dependency not found: ${strong}%s${reset}\n" "$prog"
    exit 1
  fi
done

# Config
# -----
# Read settings from exported variables

if [ "$EPHEMERAL_SRC" ]; then
  src_dir="$EPHEMERAL_SRC"
else
  src_dir="$HOME"
fi

if [ "$EPHEMERAL_DST" ]; then
  dst_dir="$EPHEMERAL_DST"
else
  dst_dir="$XDG_RUNTIME_DIR/ephemeral-cache"
fi

# Main
# ----
# Init destination dir
mkdir -p "$dst_dir"

# Link source path to destination dir
_link() {
  local _src="$src_dir/$1"
  local _dst="$dst_dir/$1"
  local _dst_parent="${_dst%/*}"

  if ! [ "$EPHEMERAL_DRY_RUN" == "true" ]; then 
    mkdir -p "$_dst_parent"
    rm -rf "$_dst" 
    mv "$_src" "$_dst_parent"
    ln -s "$_dst" "$_src"
  else
    printf "%s to %s\n" "$_src" "$_dst"
  fi
}

# TODO: Parallelize using semaphore
# Find and link chromium instances cache dirs
_link_chromium() {
  # Find directories with chromium signature
  _chromium_root_dirs=$(fd --type d --base-directory "$src_dir" --unrestricted "blob_storage" --exclude "Trash/" |\
                        sed 's|/blob_storage/||')

  mapfile -t _chromium_root_dirs <<< "$_chromium_root_dirs"

  _chromium_cache_dirs=("Cache" "CachedData" "CachedExtensions" "Code Cache" "GPUCache")

  for root in "${_chromium_root_dirs[@]}"; do
    if [ "$root" ]; then
      printf "${blue}\nLinking Chromium instance... ${strong}%s${reset}\n" "$root"

      for dir in "${_chromium_cache_dirs[@]}"; do
        if [ -a "$root/$dir" ]; then
          printf "${yellow}linking... ${strong}%s${reset}\n" "$dir"
          _link "$root/$dir"
        fi
      done
    fi
  done
}

# Main
# ----
if [ "$EPHEMERAL_DEBUG" == "true" ]; then
  set -x  # enable
fi

_link_chromium
